# See src/jd_vars : def_GLOB_LXDEFS

"""
$SIGNATURES

Internal function to resolve a `\\output{rpath}` (finds the output and shows it in a pre block).
"""
function resolve_lx_output(lxc::LxCom, reproc::Bool=false)::String
    rpath = strip(content(lxc.braces[1])) # [assets]/subpath/script{.jl}
    return resolve_lx_input_plainoutput(rpath, reproc)
end


"""
$SIGNATURES

Internal function to resolve a `\\textoutput{rpath}` (finds the output and shows it as markdown).
Note: the output is re-processed (if there's any markdown in the output, it will be parsed).
"""
resolve_lx_textoutput(lxc::LxCom) = resolve_lx_output(lxc, true)


"""
$SIGNATURES

Internal function to resolve a `\\figalt{alt}{rpath}` (finds a plot and includes it with alt).
"""
function resolve_lx_figalt(lxc::LxCom)::String
    rpath = strip(content(lxc.braces[2]))
    alt = strip(content(lxc.braces[1]))
    path = resolve_assets_rpath(rpath; canonical=false)
    fdir, fext = splitext(path)
    # there are several cases
    # A. a path with no extension --> guess extension
    # B. a path with extension --> use that
    # then in both cases there can be a relative path set but the user may mean
    # that it's in the subfolder /output/ (if generated by code) so should look
    # both in the relpath and if not found and if /output/ not already the last subdir
    candext = ifelse(isempty(fext), (".png", ".jpeg", ".jpg", ".svg", ".gif"), (fext,))
    for ext ∈ candext
        candpath = fdir * ext
        syspath  = joinpath(JD_PATHS[:f], split(candpath, '/')...)
        isfile(syspath) && return html_img(candpath, alt)
    end
    # now try in the output dir just in case (provided we weren't already looking there)
    p1, p2 = splitdir(fdir)
    if splitdir(p1)[2] != "output"
        for ext ∈ candext
            candpath = joinpath(p1, "output", p2 * ext)
            syspath  = joinpath(JD_PATHS[:f], split(candpath, '/')...)
            isfile(syspath) && return html_img(candpath, alt)
        end
    end
    return html_err("image matching '$path' not found")
end


"""
$SIGNATURES

Internal function to resolve a `\\file{name}{rpath}` (finds a file and includes it with link name).
Note that while `\\figalt` is tolerant to extensions not being specified, this one is not.
"""
function resolve_lx_file(lxc::LxCom)::String
    rpath = strip(content(lxc.braces[2]))
    name = strip(content(lxc.braces[1]))
    path = resolve_assets_rpath(rpath; canonical=false)
    syspath = joinpath(JD_PATHS[:f], split(path, '/')...)
    isfile(syspath) && return html_ahref(path, name)
    return html_err("file matching '$path' not found")
end


"""
$SIGNATURES

Dictionary of functions to use for different default latex-like commands. The output of these
commands is inserted "as-is" (without re-processing) in the HTML.
"""
const JD_LX_SIMPLE = Dict{String, Function}(
    "\\output" => resolve_lx_output,  # include plain output generated by code
    "\\figalt" => resolve_lx_figalt,  # include a figure (may or may not have been generated)
    "\\file"   => resolve_lx_file,    # include a file
    )


"""
$SIGNATURES

Same as [`JD_LX_SIMPLE`](@ref) except the output is re-processed before being inserted in the HTML.
"""
const JD_LX_SIMPLE_REPROC = Dict{String, Function}(
    "\\textoutput" => resolve_lx_textoutput, # include output generated by code and reproc
    )
